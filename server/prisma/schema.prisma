generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

enum Highlight {
  eating
  SmokeFree
}

enum CarType {
  Berline
  Break
  Coupe
  Cabriolet
  Suv
}

enum ApplicationStatus {
  Pending
  Denied
  Approved
}

enum PaymentStatus {
  Pending
  Paid
  PartiallyPaid
  Overdue
}

model Property {
  id                Int          @id @default(autoincrement())
  name              String
  description       String
  photoUrls         String[]
  isPetsAllowed     Boolean      @default(false)
  carType           CarType
  postedDate        DateTime     @default(now())
  averageRating     Float?       @default(0)
  numberOfReviews   Int?         @default(0)
  locationId        Int
  conducteurCognitoId  String
  location     Location      @relation(fields: [locationId], references: [id])
  conducteur      Conducteur       @relation(fields: [conducteurCognitoId], references: [cognitoId])
  leases       Lease[]
  applications Application[]
  favoritedBy  Passager[]      @relation("PassagerFavorites")
  passagers      Passager[]      @relation("PassagerProperties")
}

model Conducteur {
  id          Int    @id @default(autoincrement())
  cognitoId   String @unique
  name        String
  email       String
  phoneNumber String

  conducteurProperties Property[]
}

model Passager {
  id          Int    @id @default(autoincrement())
  cognitoId   String @unique
  name        String
  email       String
  phoneNumber String

  properties   Property[]    @relation("PassagerProperties")
  favorites    Property[]    @relation("PassagerFavorites")
  applications Application[]
  leases       Lease[]
}

model Location {
  id          Int                                   @id @default(autoincrement())
  address     String
  city        String
  state       String
  country     String
  postalCode  String
  coordinates Unsupported("geography(Point, 4326)")

  properties Property[]
}

model Application {
  id              Int               @id @default(autoincrement())
  applicationDate DateTime
  status          ApplicationStatus
  propertyId      Int
  passagerCognitoId String
  name            String
  email           String
  phoneNumber     String
  message         String?
  leaseId         Int?              @unique
  property Property @relation(fields: [propertyId], references: [id])
  passager   Passager   @relation(fields: [passagerCognitoId], references: [cognitoId])
  lease    Lease?   @relation(fields: [leaseId], references: [id])
}

model Lease {
  id              Int      @id @default(autoincrement())
  startDate       DateTime
  endDate         DateTime
  rent            Float
  deposit         Float
  propertyId      Int
  passagerCognitoId String

  property    Property     @relation(fields: [propertyId], references: [id])
  passager      Passager       @relation(fields: [passagerCognitoId], references: [cognitoId])
  application Application?
  payments    Payment[]
}

model Payment {
  id            Int           @id @default(autoincrement())
  amountDue     Float
  amountPaid    Float
  dueDate       DateTime
  paymentDate   DateTime
  paymentStatus PaymentStatus
  leaseId       Int

  lease Lease @relation(fields: [leaseId], references: [id])
}
